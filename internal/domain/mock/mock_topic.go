// Code generated by MockGen. DO NOT EDIT.
// Source: topic.go

// Package mock is a generated GoMock package.
package mock

import (
	model "go-api/internal/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTopicRepository is a mock of TopicRepository interface.
type MockTopicRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTopicRepositoryMockRecorder
}

// MockTopicRepositoryMockRecorder is the mock recorder for MockTopicRepository.
type MockTopicRepositoryMockRecorder struct {
	mock *MockTopicRepository
}

// NewMockTopicRepository creates a new mock instance.
func NewMockTopicRepository(ctrl *gomock.Controller) *MockTopicRepository {
	mock := &MockTopicRepository{ctrl: ctrl}
	mock.recorder = &MockTopicRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicRepository) EXPECT() *MockTopicRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTopicRepository) Get(id uint) (*model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTopicRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTopicRepository)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockTopicRepository) GetAll() ([]model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTopicRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTopicRepository)(nil).GetAll))
}

// Remove mocks base method.
func (m *MockTopicRepository) Remove(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockTopicRepositoryMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockTopicRepository)(nil).Remove), id)
}

// Save mocks base method.
func (m *MockTopicRepository) Save(arg0 *model.Topic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTopicRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTopicRepository)(nil).Save), arg0)
}

// Update mocks base method.
func (m *MockTopicRepository) Update(arg0 *model.Topic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTopicRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTopicRepository)(nil).Update), arg0)
}
