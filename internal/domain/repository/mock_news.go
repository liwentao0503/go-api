// Code generated by MockGen. DO NOT EDIT.
// Source: news.go

// Package repository is a generated GoMock package.
package repository

import (
	model "go-api/internal/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNewsRepository is a mock of NewsRepository interface.
type MockNewsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNewsRepositoryMockRecorder
}

// MockNewsRepositoryMockRecorder is the mock recorder for MockNewsRepository.
type MockNewsRepositoryMockRecorder struct {
	mock *MockNewsRepository
}

// NewMockNewsRepository creates a new mock instance.
func NewMockNewsRepository(ctrl *gomock.Controller) *MockNewsRepository {
	mock := &MockNewsRepository{ctrl: ctrl}
	mock.recorder = &MockNewsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsRepository) EXPECT() *MockNewsRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockNewsRepository) Get(id uint) (*model.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*model.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNewsRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNewsRepository)(nil).Get), id)
}

// GetAllByStatus mocks base method.
func (m *MockNewsRepository) GetAllByStatus(status model.NewsStatus, pagination model.Pagination) ([]model.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByStatus", status, pagination)
	ret0, _ := ret[0].([]model.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByStatus indicates an expected call of GetAllByStatus.
func (mr *MockNewsRepositoryMockRecorder) GetAllByStatus(status, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByStatus", reflect.TypeOf((*MockNewsRepository)(nil).GetAllByStatus), status, pagination)
}

// Remove mocks base method.
func (m *MockNewsRepository) Remove(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockNewsRepositoryMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockNewsRepository)(nil).Remove), id)
}

// Save mocks base method.
func (m *MockNewsRepository) Save(arg0 *model.News) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockNewsRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockNewsRepository)(nil).Save), arg0)
}

// Update mocks base method.
func (m *MockNewsRepository) Update(arg0 *model.News) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNewsRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNewsRepository)(nil).Update), arg0)
}
